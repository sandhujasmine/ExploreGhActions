name: "[changed-src] Check for changes in src/ dir"

on:
  pull_request:
    types:
      - closed
      # following added for testing
      - opened
      - synchronize
    paths:
      # run on changes to any src files
      - "**/src/**"
      # added this for testing
      - ".github/workflows/changed-src.yml"

permissions:
  contents: write
  pull-requests: read

# Each PR merge should use a different group since github.sha will be different
concurrency:
  group: ${{ github.workflow }}-${{ github.event.pull_request.number || github.sha }}
  cancel-in-progress: true

jobs:
  needs-version-bump:
    name: Check for changes in src/ dir
    if: (!contains(github.event.pull_request.labels.*.name, 'model-catalog-build'))
    runs-on: ubuntu-latest
    outputs:
      directories: ${{ steps.print_changed_files.outputs.directories }}

    steps:
      - name: Checkout Repo
        uses: actions/checkout@08c6903cd8c0fde910a37f88322edcfb5dd907a8 # v5.0.0
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          fetch-depth: 0  # Need full history for commitizen

      - name: Get changed files in the PR
        id: changed_files
        uses: tj-actions/changed-files@ed68ef82c095e0d48ec87eccea555d944a631a4c # v46.0.5
        with:
          files: |
            **/src/**
          dir_names: true   # only want directory level
          base_sha: ${{ github.event.pull_request.base.sha }}   # PR base commit in `main` commit before merge
          sha: ${{ github.event.pull_request.head.sha }}  # PR head commit (works for all PR states)

      - name: Output changed files
        id: print_changed_files
        shell: python
        run: |
          import json
          import os
          
          changed_files = os.environ.get('CHANGED_FILES', '')
          files_list = [f.strip() for f in changed_files.split() if f.strip()]
          
          # Extract directories one level up from src
          directories = set()
          for file_path in files_list:
              # Split path and find src directory
              parts = file_path.split('/')
              if 'src' in parts:
                  src_index = parts.index('src')
                  if src_index > 0:
                      # Get the directory one level up from src
                      parent_dir = '/'.join(parts[:src_index])
                      directories.add(parent_dir)
          
          # Output should be a json structure which is read in by the next step
          directories_list = sorted(list(directories))
          
          # Output to GITHUB_OUTPUT for next step
          with open(os.environ['GITHUB_OUTPUT'], 'a') as f:
              f.write(f'directories={json.dumps(directories_list)}\n')
          
          # Output to step summary
          with open(os.environ['GITHUB_STEP_SUMMARY'], 'a') as f:
              f.write('## Affected Directories\n')
              f.write(f'```json\n{json.dumps(directories_list, indent=2)}\n```\n')
        env:
          CHANGED_FILES: ${{ steps.changed_files.outputs.all_modified_files }}

  build-matrix:
    name: Build Matrix for Changed Directories
    needs: needs-version-bump
    if: needs.needs-version-bump.result == 'success' && fromJson(needs.needs-version-bump.outputs.directories) != null
    runs-on: ubuntu-latest
    strategy:
      matrix:
        directory: ${{ fromJson(needs.needs-version-bump.outputs.directories) }}
    steps:
      - name: Checkout Repo
        uses: actions/checkout@08c6903cd8c0fde910a37f88322edcfb5dd907a8 # v5.0.0
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
      
      - name: Build for ${{ matrix.directory }}
        run: |
          echo "Building directory: ${{ matrix.directory }}"
          echo "This would run build steps for ${{ matrix.directory }}"
          # Add your actual build commands here