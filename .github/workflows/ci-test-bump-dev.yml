name: Bump version & create PR
on:
  pull_request:
    types:
      - closed
    paths:
        - 'src/test/**'
    branches:
      - 'main'

  workflow_dispatch:  # manual trigger mostly for testing
    inputs:
      debug:
        description: 'ssh session to debug'
        required: false
        type: boolean

permissions:
  contents: write
  pull-requests: write

jobs:
  build_config:
    # bump version, build dev pkg & upload to dev
    # either manually or by PR merge (looks for source code changes)
    if: >
      github.event.pull_request.merged == true ||
      github.event_name == 'workflow_dispatch'
    name: Bump dev version & build dev package
    runs-on: ubuntu-latest
    steps:
    - name: Retrieve the source code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0
    - name: Install commitizen; prepare git for commiting
      id: config_tools
      run: |
        # simpler to use pip - couldn't figure out how to use conda env
        pip install commitizen
        git config --global user.email "you@example.com"
        git config --global user.name "PR-bot"
    - name: get short git hash; install commitizen
      id: get_version
      run: |
        set -euxo pipefail
        echo "SHORT_HASH=$(git rev-parse --short HEAD)" >> $GITHUB_OUTPUT
      shell: bash
    - name: Debug
      if: ${{ github.event.inputs.debug == 'true' }}
      env:
        VERSION: ${{ steps.get_version.outputs.SHORT_HASH }}
        PR_URL: https://github.com/${{ github.repository }}/pull/${{ github.event.number }}
        PRNUM: PR#${{ github.event.number }}
        GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        GH_CONTEXT: ${{ toJson(github) }}
      uses: mxschmitt/action-tmate@v3
    - name: Create PR
      env:
        GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        EVENT: ${{ github.event_name }}
        BRANCH_PRE: test-dev-build-${{ steps.get_version.outputs.SHORT_HASH }}
        VERSION: ${{ steps.get_version.outputs.SHORT_HASH}}
      run: |
        set -euxo pipefail
        PRE_TITLE="[${VERSION}]Dev vers bump:"
        if [[ "$EVENT" == "workflow_dispatch" ]]; then
          BRANCH=$BRANCH_PRE/workflow_dispatch
          TITLE="${PRE_TITLE} triggered manually"
          BODY="- Created by manual trigger"
        else
          PR=${{ github.event.number }}
          REPO=${{ github.repository }}
          BRANCH=$BRANCH_PRE/${{ github.head_ref }}
          TITLE="[${PRE_TITLE}] triggered by updates from PR: ${PR}"
          BODY="- Created after merging [PR#${PR}](https://github.com/${REPO}/pull/${PR})"
        fi

        git checkout -b $BRANCH

        echo "bump dev version (do not push tag)"
        cz bump --yes $(cz bump --yes --get-next)+${VERSION}

        git push -u origin $BRANCH
        gh pr create -B main --title "$TITLE" --body "$BODY"
      shell: bash
    - name: build package & upload
      run: |
        echo "current branch: $(git rev-parse --abbrev-ref HEAD)"
        conda install -y conda-build
        conda build conda.recipe/
      shell: bash
    - name: 'Upload Artifact'
      uses: actions/upload-artifact@v4
      env:
        BUILD_PREFIX: /usr/share/miniconda/conda-bld
      with:
        name: test
        path: $BUILD_PREFIX/**/test*.conda

    #  if: false
    #  id: cpr
    #  uses: peter-evans/create-pull-request@v7
    #  with:
    #    # context is for creating a PR where base is main.
    #    #   github.head_ref - name of the branch that has been merged
    #    #   github.event.number - # of the PR that was just merged
    #    token: ${{ secrets.TEST_TOKEN }}
    #    branch: update-agent-api-wrapper/${{ github.head_ref }}
    #    title: Build spec update from PR#${{ github.event.number }}
    #    body: |
    #      - Created upon merge of: [PR#${{ github.event.number }}](https://github.com/${{ github.event.repository }}/pull/${{ github.event.number }})
    #      - Automated changes by [create-pull-request](https://github.com/peter-evans/create-pull-request) GitHub action
    #    labels: |
    #      automation
    #      ${{ github.ref_name }}
